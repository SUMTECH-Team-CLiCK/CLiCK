{"ast":null,"code":"var _jsxFileName = \"/Users/hanlee/CLiCK/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatWindow from './components/ChatWindow';\nimport PromptInput from './components/PromptInput';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 실제로는 채팅 목록과 메시지를 API로부터 받아와야 합니다.\n  const [messages, setMessages] = useState([{\n    sender: 'gpt',\n    text: '안녕하세요! 무엇을 도와드릴까요?'\n  }]);\n  const [chats, setChats] = useState([{\n    id: 1,\n    title: '카보닐기 정의 설명',\n    isFavorited: true\n  }, {\n    id: 2,\n    title: '리액트 state 관리 방법',\n    isFavorited: false\n  }]);\n  const handleSendMessage = newMessage => {\n    // 사용자가 보낸 메시지를 화면에 추가\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: newMessage\n    }]);\n\n    // TODO: 백엔드 API 호출하여 GPT 응답 받아오기\n    // const gptResponse = await api.getChatResponse(newMessage);\n    // setMessages(prev => [...prev, { sender: 'gpt', text: gptResponse }]);\n  };\n  const handleToggleFavorite = id => {\n    setChats(chats.map(chat => chat.id === id ? {\n      ...chat,\n      isFavorited: !chat.isFavorited\n    } : chat));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      chats: chats,\n      onToggleFavorite: handleToggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PromptInput, {\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5BPR3cG6FBuQB7Xb6gmHdlMSBSY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Sidebar","ChatWindow","PromptInput","jsxDEV","_jsxDEV","App","_s","messages","setMessages","sender","text","chats","setChats","id","title","isFavorited","handleSendMessage","newMessage","prev","handleToggleFavorite","map","chat","className","children","onToggleFavorite","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/hanlee/CLiCK/client/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatWindow from './components/ChatWindow';\nimport PromptInput from './components/PromptInput';\nimport './App.css';\n\nfunction App() {\n  // 실제로는 채팅 목록과 메시지를 API로부터 받아와야 합니다.\n  const [messages, setMessages] = useState([\n    { sender: 'gpt', text: '안녕하세요! 무엇을 도와드릴까요?' }\n  ]);\n  const [chats, setChats] = useState([\n      { id: 1, title: '카보닐기 정의 설명', isFavorited: true },\n      { id: 2, title: '리액트 state 관리 방법', isFavorited: false },\n  ]);\n\n  const handleSendMessage = (newMessage) => {\n    // 사용자가 보낸 메시지를 화면에 추가\n    setMessages(prev => [...prev, { sender: 'user', text: newMessage }]);\n    \n    // TODO: 백엔드 API 호출하여 GPT 응답 받아오기\n    // const gptResponse = await api.getChatResponse(newMessage);\n    // setMessages(prev => [...prev, { sender: 'gpt', text: gptResponse }]);\n  };\n  \n  const handleToggleFavorite = (id) => {\n    setChats(chats.map(chat => \n      chat.id === id ? { ...chat, isFavorited: !chat.isFavorited } : chat\n    ));\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Sidebar chats={chats} onToggleFavorite={handleToggleFavorite} />\n      <main className=\"chat-area\">\n        <ChatWindow messages={messages} />\n        <PromptInput onSendMessage={handleSendMessage} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,CACvC;IAAEU,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAqB,CAAC,CAC9C,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAC/B;IAAEc,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,YAAY;IAAEC,WAAW,EAAE;EAAK,CAAC,EACjD;IAAEF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,iBAAiB;IAAEC,WAAW,EAAE;EAAM,CAAC,CAC1D,CAAC;EAEF,MAAMC,iBAAiB,GAAIC,UAAU,IAAK;IACxC;IACAT,WAAW,CAACU,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAET,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEO;IAAW,CAAC,CAAC,CAAC;;IAEpE;IACA;IACA;EACF,CAAC;EAED,MAAME,oBAAoB,GAAIN,EAAE,IAAK;IACnCD,QAAQ,CAACD,KAAK,CAACS,GAAG,CAACC,IAAI,IACrBA,IAAI,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGQ,IAAI;MAAEN,WAAW,EAAE,CAACM,IAAI,CAACN;IAAY,CAAC,GAAGM,IACjE,CAAC,CAAC;EACJ,CAAC;EAED,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BnB,OAAA,CAACJ,OAAO;MAACW,KAAK,EAAEA,KAAM;MAACa,gBAAgB,EAAEL;IAAqB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjExB,OAAA;MAAMkB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACzBnB,OAAA,CAACH,UAAU;QAACM,QAAQ,EAAEA;MAAS;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClCxB,OAAA,CAACF,WAAW;QAAC2B,aAAa,EAAEb;MAAkB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACtB,EAAA,CAlCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}